 *
 * The code within this directory is free software; you can 
 * redistribute it and/or modify it under the terms of the GNU Library 
 * General Public License as published by the Free Software Foundation;
 * either version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 *
=============== Packaging =================

To make a package with the wanted sub-project, enter to its directory and invoke:
    `fakeroot debian/rules binary'

To clean invoke:
    `fakeroot debian/rules clean'

Installing can be performed with dpkg/any pkg managing software.
Note: if you have any doubts about quality of a package, you can use lintian tool to check it,
just type `lintian <path_to_the_pkg>' and it will yield some warning, infos and errors. 
It is generally good idea to not install packages for which lintian yields errors. Warnings can be ignored.

Note: package managing software performs lintian checking before installing automatically and disallows installing
    packages with errors.

=============== Compiling =================

For compiling, convenient is to use Makefile that can be found here.

If you want to compile subprojects manually (or you want to compile only some of them - Makefile manages all at once),
we use CMake for building. Look in the Makefiles of the subprojects to see how CMake building process should be performed.

There are few important thing that you have to note:
    * Building subprojects that are dependent on the other subprojects needs proper subprojects to installed in your system,
        use .deb packages for that.

    * If you are building with CMake and you want to use your libraries/executables to work in the build tree,
        you have to invoke CMake with -DCMAKE_SKIP_RPATH=FALSE switch (this applies only to sub-projects with dependencies).

    * Wntrling-en depends on wntrling-core, and wntrling-cli relies on both of them.


The wintrlingua-cli provides a command line interface for Wintermute's Linguistics. If compiled correctly, the folder /bin
should be populated with binaries. The folder /bin/store is vital to
Wintermute's Linguistics; it contains the Wintermute's Linguistics database.

The executables are usually in the 'build' folders.
